{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n\n    var complete = function () {\n      return subscriber.complete();\n    }; // emit the current state of the task\n\n\n    progress(task.snapshot); // emit progression of the task\n\n    var unsubscribeFromOnStateChanged = task.on('state_changed', progress); // use the promise form of task, to get the last success snapshot\n\n    task.then(function (snapshot) {\n      progress(snapshot);\n      setTimeout(function () {\n        return complete();\n      }, 0);\n    }, function (e) {\n      progress(task.snapshot);\n      setTimeout(function () {\n        return error(e);\n      }, 0);\n    }); // the unsubscribe method returns by storage isn't typed in the\n    // way rxjs expects, Function vs () => void, so wrap it\n\n    return function unsubscribe() {\n      unsubscribeFromOnStateChanged();\n    };\n  }).pipe( // since we're emitting first the current snapshot and then progression\n  // it's possible that we could double fire synchronously; namely when in\n  // a terminal state (success, error, canceled). Debounce to address.\n  debounceTime(0));\n}\n\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n} // MARK: Breaking change (renaming put to uploadBytesResumable)\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n} // MARK: Breaking change (renaming put to uploadString)\n\n\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };","map":{"version":3,"names":["getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Observable","from","debounceTime","shareReplay","map","fromTask","task","subscriber","progress","snap","next","error","e","complete","snapshot","unsubscribeFromOnStateChanged","on","then","setTimeout","unsubscribe","pipe","ref","data","metadata","subscription","subscribe","cancel","bufferSize","refCount","format","percentage","bytesTransferred","totalBytes"],"sources":["C:/Users/HP/Documents/ArgentinaPrograma/ProyectoIntegrador_JuradoRomina/Portfolio_AP/FrontEnd/node_modules/rxfire/storage/index.esm.js"],"sourcesContent":["import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n    return new Observable(function (subscriber) {\n        var progress = function (snap) { return subscriber.next(snap); };\n        var error = function (e) { return subscriber.error(e); };\n        var complete = function () { return subscriber.complete(); };\n        // emit the current state of the task\n        progress(task.snapshot);\n        // emit progression of the task\n        var unsubscribeFromOnStateChanged = task.on('state_changed', progress);\n        // use the promise form of task, to get the last success snapshot\n        task.then(function (snapshot) {\n            progress(snapshot);\n            setTimeout(function () { return complete(); }, 0);\n        }, function (e) {\n            progress(task.snapshot);\n            setTimeout(function () { return error(e); }, 0);\n        });\n        // the unsubscribe method returns by storage isn't typed in the\n        // way rxjs expects, Function vs () => void, so wrap it\n        return function unsubscribe() {\n            unsubscribeFromOnStateChanged();\n        };\n    }).pipe(\n    // since we're emitting first the current snapshot and then progression\n    // it's possible that we could double fire synchronously; namely when in\n    // a terminal state (success, error, canceled). Debounce to address.\n    debounceTime(0));\n}\nfunction getDownloadURL(ref) {\n    return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n    return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = uploadBytesResumable$1(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n    return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot\n    }); }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}