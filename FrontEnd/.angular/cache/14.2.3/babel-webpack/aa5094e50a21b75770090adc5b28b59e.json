{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/HP/Documents/ArgentinaPrograma/ProyectoIntegrador_JuradoRomina/Portfolio_AP/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\n\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  constructor(code, message, status_ = 0) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    this.status_ = status_;\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status() {\n    return this.status_;\n  }\n\n  set status(status) {\n    this.status_ = status;\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\"\n  /* UNKNOWN */\n  , message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\"\n  /* OBJECT_NOT_FOUND */\n  , \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\"\n  /* QUOTA_EXCEEDED */\n  , \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\"\n  /* UNAUTHENTICATED */\n  , message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\"\n  /* UNAUTHORIZED_APP */\n  , 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\"\n  /* UNAUTHORIZED */\n  , \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\"\n  /* RETRY_LIMIT_EXCEEDED */\n  , 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(\"canceled\"\n  /* CANCELED */\n  , 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\"\n  /* INVALID_URL */\n  , \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\"\n  /* INVALID_DEFAULT_BUCKET */\n  , \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\"\n  /* NO_DEFAULT_BUCKET */\n  , 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\"\n  /* CANNOT_SLICE_BLOB */\n  , 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\"\n  /* SERVER_FILE_WRONG_SIZE */\n  , 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\"\n  /* NO_DOWNLOAD_URL */\n  , 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\"\n  /* INVALID_ARGUMENT */\n  , message);\n}\n\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\"\n  /* APP_DELETED */\n  , 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\"\n  /* INVALID_ROOT_OPERATION */\n  , \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\"\n  /* INVALID_FORMAT */\n  , \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\"\n  /* INTERNAL_ERROR */\n  , 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(_appDelete = false) {}\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\n\n\nfunction start(doRequest, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\n\n\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n  408, // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if ((!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_)) && this.retry) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\"\n      /* UNSUPPORTED_ENVIRONMENT */\n      , \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* RUNNING */\n    :\n    case \"pausing\"\n    /* PAUSING */\n    :\n    case \"canceling\"\n    /* CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n\n    return this.xhr_.response;\n  }\n\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n\n}\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n\n}\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n\n}\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(\"canceled\"\n      /* CANCELED */\n      )) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n      }\n    };\n\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  isExponentialBackoffExpired() {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\"\n        /* RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* PAUSING */\n        :\n          this._transition(\"paused\"\n          /* PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken,\n      /*retry=*/\n      false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* CANCELING */\n      :\n      case \"pausing\"\n      /* PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* PAUSING */\n      :\n        this._transition(\"paused\"\n        /* PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* PAUSED */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* RUNNING */\n    || this._state === \"pausing\"\n    /* PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator(function* (ref, accumulator, pageToken) {\n    const opt = {\n      // maxResults is 1000 by default.\n      pageToken\n    };\n    const nextPage = yield list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n\n    if (nextPage.nextPageToken != null) {\n      yield listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n  });\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  _getAuthToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._overrideAuthToken) {\n        return _this._overrideAuthToken;\n      }\n\n      const auth = _this._authProvider.getImmediate({\n        optional: true\n      });\n\n      if (auth) {\n        const tokenData = yield auth.getToken();\n\n        if (tokenData !== null) {\n          return tokenData.accessToken;\n        }\n      }\n\n      return null;\n    })();\n  }\n\n  _getAppCheckToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const appCheck = _this2._appCheckProvider.getImmediate({\n        optional: true\n      });\n\n      if (appCheck) {\n        const result = yield appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n\n        return result.token;\n      }\n\n      return null;\n    })();\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  makeRequestWithTokens(requestInfo, requestFactory) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const [authToken, appCheckToken] = yield Promise.all([_this3._getAuthToken(), _this3._getAppCheckToken()]);\n      return _this3._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    })();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.13\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"names":["_getProvider","getApp","_registerComponent","registerVersion","SDK_VERSION","FirebaseError","isNode","createMockUserToken","getModularInstance","getDefaultEmulatorHostnameAndPort","Component","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","constructor","code","message","status_","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getBytes$1","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes$1","finalMetadata","uploadBytesResumable$1","uploadString$1","listAll$1","accumulator","listAllHelper","opt","nextPage","list$1","options","op","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","getBytes","uploadBytes","uploadString","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","getStorage","bucketUrl","storageProvider","storageInstance","identifier","emulator","connectStorageEmulator","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","_FbsBlob","_Location","_TaskEvent","_TaskState","_UploadTask","_dataFromString","_invalidArgument","_invalidRootOperation"],"sources":["C:/Users/HP/Documents/ArgentinaPrograma/ProyectoIntegrador_JuradoRomina/Portfolio_AP/FrontEnd/node_modules/@firebase/storage/dist/index.esm2017.js"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unque to StorageError.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(\"unknown\" /* UNKNOWN */, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if ((!hitServer ||\r\n                    isRetryStatusCode(status, this.additionalRetryCodes_)) &&\r\n                    this.retry) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* RUNNING */:\r\n        case \"pausing\" /* PAUSING */:\r\n        case \"canceling\" /* CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(\"canceled\" /* CANCELED */)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* CANCELING */:\r\n                    this._transition(\"canceled\" /* CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* PAUSING */:\r\n                    this._transition(\"paused\" /* PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* CANCELING */:\r\n            case \"pausing\" /* PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* PAUSING */:\r\n                this._transition(\"paused\" /* PAUSED */);\r\n                break;\r\n            case \"canceling\" /* CANCELING */:\r\n                this._transition(\"canceled\" /* CANCELED */);\r\n                break;\r\n            case \"running\" /* RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* PAUSED */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* RUNNING */ ||\r\n            this._state === \"pausing\" /* PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.9.13\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}